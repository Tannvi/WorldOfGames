# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

# This workflow will install Python dependencies, run tests and lint with a single version f Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t tannvi/getting-started .

      - name: Start Docker Compose
        run: docker-compose up -d

      - name: Wait for the application to start
        run: |
          max_retries=10
          retries=0
          while ! curl -s http://localhost:5000 > /dev/null; do
            retries=$((retries + 1))
            if [ $retries -ge $max_retries ]; then
              echo "Application failed to start within the timeout period"
              exit 1
            fi
            echo "Waiting for application to start..."
            sleep 5
          done

      - name: Run e2e tests inside Docker container
        run: docker-compose exec scoreservice python tests/e2e.py

      - name: Push Docker image
        run: docker push tannvi/project
        if: success()

      - name: Shutdown Docker Compose
        run: docker-compose down
