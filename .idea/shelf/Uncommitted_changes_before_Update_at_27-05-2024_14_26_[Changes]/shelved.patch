Index: Live.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Live.py b/Live.py
--- a/Live.py	(revision 9c2de904ab94c5853786e5509180181e744826fe)
+++ b/Live.py	(date 1716706342643)
@@ -1,0 +1,65 @@
+from MemoryGame import MemoryGame
+from GuessGame import GuessGame
+from CurrencyRouletteGame import CurrencyRouletteGame
+from Score import add_score
+
+def welcome(name):
+  """Greets the user by name and welcomes them to the World of Games."""
+  return f"Hello {name} and welcome to the World of Games (WoG).\nHere you can find many cool games to play."
+
+def load_game():
+  """Prompts user for game selection and difficulty level, then starts the chosen game."""
+  print("Please choose a game to play:")
+  print("1. Memory Game - a sequence of numbers will appear for 1 second and you have to guess it back")
+  print("2. Guess Game - guess a number and see if you chose like the computer")
+  print("3. Currency Roulette - try and guess the value of a random amount of USD in ILS")
+
+  while True:
+    try:
+      game_choice = int(input("Enter game number (1-3): "))
+      if 1 <= game_choice <= 3:
+        break
+      else:
+        print("Invalid game choice. Please enter a number between 1 and 3.")
+    except ValueError:
+      print("Invalid input. Please enter a number.")
+
+  print("\nPlease choose game difficulty from 1 to 5:")
+
+  while True:
+    try:
+      difficulty_level = int(input("Enter difficulty level (1-5): "))
+      if 1 <= difficulty_level <= 5:
+        break
+      else:
+        print("Invalid difficulty level. Please enter a number between 1 and 5.")
+    except ValueError:
+      print("Invalid input. Please enter a number.")
+
+  # Start the chosen game based on selection
+  if game_choice == 1:
+    game = MemoryGame(difficulty_level)
+  elif game_choice == 2:
+    game = GuessGame(difficulty_level)
+  elif game_choice == 3:
+    game = CurrencyRouletteGame(difficulty_level)
+  else:
+    print("An unexpected error occurred. Please try again.")
+    return  # Exit the function if an invalid choice is made internally
+
+  # Play the game
+  win = game.play()
+
+  # Update score if the user won
+  if win:
+    add_score(difficulty_level)  # Call add_score function to update score
+
+  if win:
+    print("Congratulations! You won the game!")
+  else:
+    print("Better luck next time!")
+
+# Example usage (uncomment to test)
+# name = input("Enter your name: ")
+# print(welcome(name))
+# load_game()
Index: MainScores.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MainScores.py b/MainScores.py
--- a/MainScores.py	(revision 9c2de904ab94c5853786e5509180181e744826fe)
+++ b/MainScores.py	(date 1716706387428)
@@ -1,0 +1,24 @@
+from flask import Flask, render_template
+
+from Score import read_score, BAD_RETURN_CODE
+
+app = Flask(__name__)
+
+@app.route("/")
+def serve_score():
+  """Reads the score from file and returns an HTML response."""
+  try:
+    score = read_score()
+    if score == BAD_RETURN_CODE:
+      # Error reading score, display error message
+      return render_template("score.html", score="Error reading score")
+    else:
+      return render_template("score.html", score=score)
+  except Exception as e:
+    print(f"Unexpected error: {e}")
+    return render_template("score.html", score="Internal server error")
+
+if __name__ == "__main__":
+  app.run(debug=True)  # Run in debug mode for development (optional)
+
+
Index: GuessGame.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GuessGame.py b/GuessGame.py
--- a/GuessGame.py	(revision 9c2de904ab94c5853786e5509180181e744826fe)
+++ b/GuessGame.py	(date 1715784470761)
@@ -1,0 +1,48 @@
+import random
+
+class GuessGame:
+    def __init__(self, difficulty):
+        self.difficulty = difficulty
+        self.secret_number = self.generate_number()
+
+    def generate_number(self):
+        """Generates a random number between 1 and the difficulty."""
+        return random.randint(1, self.difficulty)
+
+    def get_guess_from_user(self):
+        """Prompts the user for a guess and validates it."""
+        while True:
+            try:
+                guess = int(input("Guess a number between 1 and {}: ".format(self.difficulty)))
+                if 1 <= guess <= self.difficulty:
+                    return guess
+                else:
+                    print("Invalid guess. Please enter a number within the range.")
+            except ValueError:
+                print("Invalid input. Please enter a whole number.")
+
+    def compare_results(self, guess):
+        """Compares the user's guess with the secret number."""
+        if guess == self.secret_number:
+            return True
+        else:
+            return False
+
+    def play(self):
+        """Runs the game loop."""
+        while True:
+            guess = self.get_guess_from_user()
+            if self.compare_results(guess):
+                print("Congratulations, you guessed it!")
+                break
+            else:
+                print("Incorrect guess. Try again.")
+
+
+
+
+
+
+
+
+
Index: tests/e2e.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/e2e.py b/tests/e2e.py
new file mode 100644
--- /dev/null	(date 1716799965970)
+++ b/tests/e2e.py	(date 1716799965970)
@@ -0,0 +1,55 @@
+import requests
+from bs4 import BeautifulSoup  # For basic HTML parsing
+
+def test_scores_service(url):
+  """Tests the score service by fetching the score and validating its format."""
+  try:
+    response = requests.get(url)
+    response.raise_for_status()  # Raise an exception for non-200 status codes
+  except requests.exceptions.RequestException as e:
+    print(f"Error fetching score: {e}")
+    return False
+
+  # Assuming the score is displayed within a div with id "score"
+  soup = BeautifulSoup(response.content, "html.parser")
+  score_element = soup.find(id="score")
+
+  if score_element is None:
+    print("Score element not found in the response.")
+    return False
+
+  try:
+    score = int(score_element.text.strip())
+  except ValueError:
+    print("Score is not a valid number.")
+    return False
+
+  if not (1 <= score <= 1000):
+    print(f"Score value ({score}) is outside the expected range (1-1000).")
+    return False
+
+  # Score is valid
+  print(f"Score retrieved successfully: {score}")
+  return True
+
+# Example usage (uncomment to test)
+# Replace with the actual URL of your deployed score service
+# service_url = "http://localhost:5000/"  # Assuming Flask app runs on port 5000
+# if test_scores_service(service_url):
+#   print("Score service test passed!")
+# else:
+#   print("Score service test failed!")
+
+
+def main():
+  """Calls the score service test and returns an exit code based on the result."""
+  # Replace with the actual URL of your deployed score service
+  service_url = "http://localhost:5000/"  # Assuming Flask app runs on port 5000
+  if test_scores_service(service_url):
+    return 0  # Test passed
+  else:
+    return -1  # Test failed
+
+if __name__ == "__main__":
+  exit_code = main()
+  exit(exit_code)
Index: .idea/WorldOfGames.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/WorldOfGames.iml b/.idea/WorldOfGames.iml
--- a/.idea/WorldOfGames.iml	(revision 9c2de904ab94c5853786e5509180181e744826fe)
+++ b/.idea/WorldOfGames.iml	(date 1715785222225)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="inheritedJdk" />
+    <orderEntry type="jdk" jdkName="Python 3.12 (PycharmProject)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"cac1de24-725a-414c-9914-96cbdfdae249\" name=\"Changes\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\"><![CDATA[{\r\n  \"associatedIndex\": 6\r\n}]]></component>\r\n  <component name=\"ProjectId\" id=\"2eYWpdVjoiXpDMLWhPfVP3dTF7Z\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"master\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"WorldOfGames\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-d68999036c7f-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.14475.56\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"cac1de24-725a-414c-9914-96cbdfdae249\" name=\"Changes\" comment=\"\" />\r\n      <created>1712082176420</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1712082176420</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/main.py</url>\r\n          <line>8</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 9c2de904ab94c5853786e5509180181e744826fe)
+++ b/.idea/workspace.xml	(date 1716799887951)
@@ -1,32 +1,98 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
   <component name="ChangeListManager">
-    <list default="true" id="cac1de24-725a-414c-9914-96cbdfdae249" name="Changes" comment="" />
+    <list default="true" id="cac1de24-725a-414c-9914-96cbdfdae249" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/Dockerfile" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/docker-compose.yml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/tests/e2e.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/WorldOfGames.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/WorldOfGames.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/CurrencyRouletteGame.py" beforeDir="false" afterPath="$PROJECT_DIR$/CurrencyRouletteGame.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GuessGame.py" beforeDir="false" afterPath="$PROJECT_DIR$/GuessGame.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Live.py" beforeDir="false" afterPath="$PROJECT_DIR$/Live.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/MainGame.py" beforeDir="false" afterPath="$PROJECT_DIR$/MainGame.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/MainScores.py" beforeDir="false" afterPath="$PROJECT_DIR$/MainScores.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/MemoryGame.py" beforeDir="false" afterPath="$PROJECT_DIR$/MemoryGame.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Score.py" beforeDir="false" afterPath="$PROJECT_DIR$/Score.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Utils.py" beforeDir="false" afterPath="$PROJECT_DIR$/Utils.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/score.html" beforeDir="false" afterPath="$PROJECT_DIR$/score.html" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Python Script" />
+      </list>
+    </option>
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
-  <component name="ProjectColorInfo"><![CDATA[{
-  "associatedIndex": 6
-}]]></component>
+  <component name="ProblemsViewState">
+    <option name="selectedTabId" value="CurrentFile" />
+  </component>
+  <component name="ProjectColorInfo">{
+  &quot;associatedIndex&quot;: 6
+}</component>
   <component name="ProjectId" id="2eYWpdVjoiXpDMLWhPfVP3dTF7Z" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "master"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Python.CurrencyRouletteGame.executor&quot;: &quot;Run&quot;,
+    &quot;Python.GuessGame.executor&quot;: &quot;Run&quot;,
+    &quot;Python.Live.executor&quot;: &quot;Run&quot;,
+    &quot;Python.MainGame.executor&quot;: &quot;Run&quot;,
+    &quot;Python.MainScores.executor&quot;: &quot;Run&quot;,
+    &quot;Python.MemoryGame.executor&quot;: &quot;Run&quot;,
+    &quot;Python.Score.executor&quot;: &quot;Run&quot;,
+    &quot;Python.Utils.executor&quot;: &quot;Run&quot;,
+    &quot;Python.main.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/91741/PycharmProjects&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;
+  },
+  &quot;keyToStringList&quot;: {
+    &quot;ChangesTree.GroupingKeys&quot;: [
+    ]
   }
-}]]></component>
-  <component name="RunManager">
+}</component>
+  <component name="RunManager" selected="Python.main">
+    <configuration name="MainScores" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
+      <module name="WorldOfGames" />
+      <option name="ENV_FILES" value="" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/MainScores.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
     <configuration name="main" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
       <module name="WorldOfGames" />
       <option name="ENV_FILES" value="" />
@@ -36,8 +102,9 @@
         <env name="PYTHONUNBUFFERED" value="1" />
       </envs>
       <option name="SDK_HOME" value="" />
+      <option name="SDK_NAME" value="Python 3.12 (Pythonfirst)" />
       <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
-      <option name="IS_MODULE_SDK" value="true" />
+      <option name="IS_MODULE_SDK" value="false" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
       <option name="SCRIPT_NAME" value="$PROJECT_DIR$/main.py" />
@@ -53,7 +120,7 @@
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
-        <option value="bundled-python-sdk-d68999036c7f-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.14475.56" />
+        <option value="bundled-python-sdk-09665e90c3a7-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.15026.15" />
       </set>
     </attachedChunks>
   </component>
@@ -68,15 +135,4 @@
     </task>
     <servers />
   </component>
-  <component name="XDebuggerManager">
-    <breakpoint-manager>
-      <breakpoints>
-        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
-          <url>file://$PROJECT_DIR$/main.py</url>
-          <line>8</line>
-          <option name="timeStamp" value="1" />
-        </line-breakpoint>
-      </breakpoints>
-    </breakpoint-manager>
-  </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.12 (WorldOfGames)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 9c2de904ab94c5853786e5509180181e744826fe)
+++ b/.idea/misc.xml	(date 1716705395973)
@@ -1,4 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12 (WorldOfGames)" project-jdk-type="Python SDK" />
+  <component name="Black">
+    <option name="sdkName" value="Python 3.12 (WorldOfGames)" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12 (PycharmProject)" project-jdk-type="Python SDK" />
+  <component name="PyCharmProfessionalAdvertiser">
+    <option name="shown" value="true" />
+  </component>
 </project>
\ No newline at end of file
Index: MainGame.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MainGame.py b/MainGame.py
--- a/MainGame.py	(revision 9c2de904ab94c5853786e5509180181e744826fe)
+++ b/MainGame.py	(date 1715785364704)
@@ -1,0 +1,4 @@
+from Live import load_game, welcome
+
+print(welcome("ABCD"))
+load_game()
Index: Utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Utils.py b/Utils.py
--- a/Utils.py	(revision 9c2de904ab94c5853786e5509180181e744826fe)
+++ b/Utils.py	(date 1716703627102)
@@ -1,0 +1,13 @@
+SCORES_FILE_NAME = "Scores.txt"  # File name for storing scores (if needed)
+BAD_RETURN_CODE = -1  # Represents an error condition in a function
+
+def clear_screen():
+    """Clears the terminal screen."""
+    import os
+    if os.name == "nt":  # Windows
+        os.system("cls")
+    else:
+        os.system("clear")  # Linux/macOS
+
+# Example usage (uncomment to test)
+# clear_screen()
Index: Score.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Score.py b/Score.py
--- a/Score.py	(revision 9c2de904ab94c5853786e5509180181e744826fe)
+++ b/Score.py	(date 1716704990622)
@@ -1,0 +1,34 @@
+from Utils import SCORES_FILE_NAME, BAD_RETURN_CODE
+
+POINTS_PER_WIN = lambda difficulty: (difficulty * 3) + 5  # Function to calculate points
+
+def read_score():
+    """Reads the current score from the scores file (if it exists)."""
+    try:
+        with open(SCORES_FILE_NAME, 'r') as f:
+            score = int(f.read().strip())
+            return score
+    except (FileNotFoundError, ValueError):
+        return 0  # Return 0 if file doesn't exist or contains invalid data
+
+def write_score(score):
+    """Writes the current score to the scores file."""
+    try:
+        with open(SCORES_FILE_NAME, 'w') as f:
+            f.write(str(score))
+    except Exception as e:
+        print(f"Error writing score to file: {e}")
+        return BAD_RETURN_CODE  # Indicate an error
+
+def add_score(difficulty):
+    """Adds the score earned based on difficulty to the current score and saves it."""
+    current_score = read_score()
+    points_earned = POINTS_PER_WIN(difficulty)
+    new_score = current_score + points_earned
+    write_score(new_score)
+    return new_score
+
+# Example usage (uncomment to test)
+# difficulty = 3
+# new_score = add_score(difficulty)
+# print(f"You earned {POINTS_PER_WIN(difficulty)} points! Your new score is {new_score}")
Index: MemoryGame.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MemoryGame.py b/MemoryGame.py
--- a/MemoryGame.py	(revision 9c2de904ab94c5853786e5509180181e744826fe)
+++ b/MemoryGame.py	(date 1715785516886)
@@ -1,0 +1,41 @@
+import random
+import time
+
+class MemoryGame:
+    def __init__(self, difficulty):
+        self.difficulty = difficulty
+
+    def generate_sequence(self):
+        """Generates a list of random numbers between 1 and 101."""
+        return random.sample(range(1, 101), self.difficulty)
+
+    def display_sequence(self, sequence):
+        """Clears the screen and displays the sequence for 0.7 seconds."""
+        print("\n" * 100)  # Clear the screen
+        for number in sequence:
+            print(number, end=" ")
+            time.sleep(0.7)
+        print("\n")  # Add a newline for visual clarity
+
+    def get_list_from_user(self):
+        """Prompts the user for a list of numbers and validates them."""
+        user_list = []
+        while len(user_list) < self.difficulty:
+            try:
+                number = int(input("Enter a number you remember ({} left): ".format(self.difficulty - len(user_list))))
+                user_list.append(number)
+            except ValueError:
+                print("Invalid input. Please enter a whole number.")
+        return user_list
+
+    def is_list_equal(self, list1, list2):
+        """Compares two lists for equality."""
+        return list1 == list2
+
+    def play(self):
+        """Runs the game loop."""
+        sequence = self.generate_sequence()
+        self.display_sequence(sequence)
+
+        user_list = self.get_list_from_user()
+        return self.is_list_equal(sequence, user_list)
Index: Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Dockerfile b/Dockerfile
new file mode 100644
--- /dev/null	(date 1716797927986)
+++ b/Dockerfile	(date 1716797927986)
@@ -0,0 +1,20 @@
+#Use a slim Python image for a smaller container size
+FROM python:3.11-slim
+
+WORKDIR /app
+
+# Copy requirements.txt (if you have one)
+COPY requirements.txt ./
+
+# Install dependencies (if using requirements.txt)
+RUN pip install -r requirements.txt
+
+# Copy your Flask application code and Scores.txt
+COPY . .
+
+# Expose the port where your Flask app listens (replace 5000 if needed)
+EXPOSE 5000
+
+# Set the command to run your Flask app (adjust the script name if different)
+# Replace with your main script if different
+CMD ["python", "MainScores.py"]
Index: docker-compose.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docker-compose.yml b/docker-compose.yml
new file mode 100644
--- /dev/null	(date 1716798270763)
+++ b/docker-compose.yml	(date 1716798270763)
@@ -0,0 +1,19 @@
+version: '3.8'  # Specify the Docker Compose version
+
+services:
+  scoreservice:
+    build: .  # Build the image from the current directory (Dockerfile)
+    volumes:
+      - .:/app  # Mount the current directory as /app in the container
+    ports:
+      - "5000:5000"  # Map container port 5000 to host port 5000
+    depends_on:
+      - scoresdata  # Ensure scoresdata service starts before scoreservice
+
+  scoresdata:  # Optional service for persisting scores data
+    image: postgres:latest  # Use a separate container for database (optional)
+    volumes:
+      - scoresdata:/var/lib/postgresql/data  # Persist data volume for scores (optional)
+
+volumes:
+  scoresdata:  # Optional named volume for scores data (optional)
Index: CurrencyRouletteGame.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CurrencyRouletteGame.py b/CurrencyRouletteGame.py
--- a/CurrencyRouletteGame.py	(revision 9c2de904ab94c5853786e5509180181e744826fe)
+++ b/CurrencyRouletteGame.py	(date 1715785516868)
@@ -1,0 +1,42 @@
+import random
+import requests
+
+class CurrencyRouletteGame:
+    def __init__(self, difficulty):
+        self.difficulty = difficulty
+
+    def get_exchange_rate(self):
+        """Fetches the current USD to ILS exchange rate from an API."""
+        url = "https://api.exchangerate.host/latest?base=USD&symbols=ILS"
+        response = requests.get(url)
+        response.raise_for_status()  # Raise an error for non-200 status codes
+        data = response.json()
+        return data["rates"]["ILS"]
+
+    def get_money_interval(self):
+        """Generates a random amount of USD and calculates the ILS interval."""
+        amount_usd = random.randint(1, 100)
+        exchange_rate = self.get_exchange_rate()
+        amount_ils = amount_usd * exchange_rate
+        interval_width = 5 - self.difficulty
+        return (amount_ils - interval_width, amount_ils + interval_width)
+
+    def get_guess_from_user(self, amount_usd):
+        """Prompts the user for a guess in ILS and validates it."""
+        while True:
+            try:
+                guess_ils = float(input(f"Guess the value of ${amount_usd:.2f} in ILS: "))
+                return guess_ils
+            except ValueError:
+                print("Invalid input. Please enter a number.")
+
+    def play(self):
+        """Runs the game loop."""
+        interval = self.get_money_interval()
+        amount_usd = random.randint(1, 100)  # Regenerate a new amount of USD
+
+        guess_ils = self.get_guess_from_user(amount_usd)
+        correct_ils = amount_usd * self.get_exchange_rate()
+
+        return interval[0] <= guess_ils <= interval[1]
+
Index: score.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/score.html b/score.html
--- a/score.html	(revision 9c2de904ab94c5853786e5509180181e744826fe)
+++ b/score.html	(date 1716706459848)
@@ -1,0 +1,9 @@
+<!DOCTYPE html>
+<html>
+<head>
+<title>Scores Game</title>
+</head>
+<body>
+<h1>The score is <div id="score">{SCORE}</div></h1>
+</body>
+</html>
diff --git a/Jenkinsfile b/Jenkinsfile
new file mode 100644
diff --git a/docker-run-command.txt b/docker-run-command.txt
new file mode 100644
diff --git a/Scores.txt b/Scores.txt
new file mode 100644
